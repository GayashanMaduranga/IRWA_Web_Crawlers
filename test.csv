Class,Description,Constructor_Details,Field_Details
Class Calendar,"The class also provides additional fields and methods for
 implementing a concrete calendar system outside the package. Those
 fields and methods are defined as protected.

 ,
 Like other locale-sensitive classes, Calendar provides a
 class method, getInstance, for getting a generally useful
 object of this type. Calendar's getInstance method
 returns a Calendar object whose
 calendar fields have been initialized with the current date and time:
 ,A Calendar object can produce all the calendar field values
 needed to implement the date-time formatting for a particular language and
 calendar style (for example, Japanese-Gregorian, Japanese-Traditional).
 Calendar defines the range of values returned by
 certain calendar fields, as well as their meaning.  For example,
 the first month of the calendar system has value MONTH ==
 JANUARY for all calendars.  Other values are defined by the
 concrete subclass, such as ERA.  See individual field
 documentation and subclass documentation for details.

 ,The calendar field values can be set by calling the set
 methods. Any field values set in a Calendar will not be
 interpreted until it needs to calculate its time value (milliseconds from
 the Epoch) or values of the calendar fields. Calling the
 get, getTimeInMillis, getTime,
 add and roll involves such calculation.

 ,Calendar has two modes for interpreting the calendar
 fields, lenient and non-lenient.  When a
 Calendar is in lenient mode, it accepts a wider range of
 calendar field values than it produces.  When a Calendar
 recomputes calendar field values for return by get(), all of
 the calendar fields are normalized. For example, a lenient
 GregorianCalendar interprets MONTH == JANUARY,
 DAY_OF_MONTH == 32 as February 1.

 ,When a Calendar is in non-lenient mode, it throws an
 exception if there is any inconsistency in its calendar fields. For
 example, a GregorianCalendar always produces
 DAY_OF_MONTH values between 1 and the length of the month. A
 non-lenient GregorianCalendar throws an exception upon
 calculating its time or calendar field values if any out-of-range field
 value has been set.

 ,When setting or getting the WEEK_OF_MONTH or
 WEEK_OF_YEAR fields, Calendar must determine the
 first week of the month or year as a reference point.  The first week of a
 month or year is defined as the earliest seven day period beginning on
 getFirstDayOfWeek() and containing at least
 getMinimalDaysInFirstWeek() days of that month or year.  Weeks
 numbered ..., -1, 0 precede the first week; weeks numbered 2, 3,... follow
 it.  Note that the normalized numbering returned by get() may be
 different.  For example, a specific Calendar subclass may
 designate the week before week 1 of a year as week n of
 the previous year.

 ,If there is any conflict in calendar field values,
 Calendar gives priorities to calendar fields that have been set
 more recently. The following are the default combinations of the
 calendar fields. The most recent combination, as determined by the
 most recently set single field, will be used.

 ,For the date fields:
 ,If there are any calendar fields whose values haven't been set in the selected
 field combination, Calendar uses their default values. The default
 value of each field may vary by concrete calendar systems. For example, in
 GregorianCalendar, the default of a field is the same as that
 of the start of the Epoch: i.e., YEAR = 1970, MONTH =
 JANUARY, DAY_OF_MONTH = 1, etc.

 ,
Note: There are certain possible ambiguities in
 interpretation of certain singular times, which are resolved in the
 following ways:
 ,
 The date or time format strings are not part of the definition of a
 calendar, as those must be modifiable or overridable by the user at
 runtime. Use DateFormat
 to format dates.

 ,set(f, value) changes calendar field
 f to value.  In addition, it sets an
 internal member variable to indicate that calendar field f has
 been changed. Although calendar field f is changed immediately,
 the calendar's time value in milliseconds is not recomputed until the next call to
 get(), getTime(), getTimeInMillis(),
 add(), or roll() is made. Thus, multiple calls to
 set() do not trigger multiple, unnecessary
 computations. As a result of changing a calendar field using
 set(), other calendar fields may also change, depending on the
 calendar field, the calendar field value, and the calendar system. In addition,
 get(f) will not necessarily return value set by
 the call to the set method
 after the calendar fields have been recomputed. The specifics are determined by
 the concrete calendar class.,Example: Consider a GregorianCalendar
 originally set to August 31, 1999. Calling set(Calendar.MONTH,
 Calendar.SEPTEMBER) sets the date to September 31,
 1999. This is a temporary internal representation that resolves to
 October 1, 1999 if getTime()is then called. However, a
 call to set(Calendar.DAY_OF_MONTH, 30) before the call to
 getTime() sets the date to September 30, 1999, since
 no recomputation occurs after set() itself.,add(f, delta) adds delta
 to field f.  This is equivalent to calling set(f,
 get(f) + delta) with two adjustments:,Add rule 1. The value of field f
   after the call minus the value of field f before the
   call is delta, modulo any overflow that has occurred in
   field f. Overflow occurs when a field value exceeds its
   range and, as a result, the next larger field is incremented or
   decremented and the field value is adjusted back into its range.,Add rule 2. If a smaller field is expected to be
   invariant, but it is impossible for it to be equal to its
   prior value because of changes in its minimum or maximum after field
   f is changed or other constraints, such as time zone
   offset changes, then its value is adjusted to be as close
   as possible to its expected value. A smaller field represents a
   smaller unit of time. HOUR is a smaller field than
   DAY_OF_MONTH. No adjustment is made to smaller fields
   that are not expected to be invariant. The calendar system
   determines what fields are expected to be invariant.,In addition, unlike set(), add() forces
 an immediate recomputation of the calendar's milliseconds and all
 fields.,Example: Consider a GregorianCalendar
 originally set to August 31, 1999. Calling add(Calendar.MONTH,
 13) sets the calendar to September 30, 2000. Add rule
 1 sets the MONTH field to September, since
 adding 13 months to August gives September of the next year. Since
 DAY_OF_MONTH cannot be 31 in September in a
 GregorianCalendar, add rule 2 sets the
 DAY_OF_MONTH to 30, the closest possible value. Although
 it is a smaller field, DAY_OF_WEEK is not adjusted by
 rule 2, since it is expected to change when the month changes in a
 GregorianCalendar.,roll(f, delta) adds
 delta to field f without changing larger
 fields. This is equivalent to calling add(f, delta) with
 the following adjustment:,Roll rule. Larger fields are unchanged after the
   call. A larger field represents a larger unit of
   time. DAY_OF_MONTH is a larger field than
   HOUR.,Example: See GregorianCalendar.roll(int, int).

 ,Usage model. To motivate the behavior of
 add() and roll(), consider a user interface
 component with increment and decrement buttons for the month, day, and
 year, and an underlying GregorianCalendar. If the
 interface reads January 31, 1999 and the user presses the month
 increment button, what should it read? If the underlying
 implementation uses set(), it might read March 3, 1999. A
 better result would be February 28, 1999. Furthermore, if the user
 presses the month increment button again, it should read March 31,
 1999, not March 28, 1999. By saving the original date and using either
 add() or roll(), depending on whether larger
 fields should be affected, the user interface can behave as most users
 will intuitively expect.","[{'Field_name': 'Calendar', 'Field_details': 'Constructs a Calendar with the default time zone\n and the default FORMAT\n locale.'}, {'Field_name': 'Calendar', 'Field_details': 'Constructs a calendar with the specified time zone and locale.'}]","[{'Field_name': 'ERA', 'Field_details': 'Field number for get and set indicating the\n era, e.g., AD or BC in the Julian calendar. This is a calendar-specific\n value; see subclass documentation.'}, {'Field_name': 'YEAR', 'Field_details': 'Field number for get and set indicating the\n year. This is a calendar-specific value; see subclass documentation.'}, {'Field_name': 'MONTH', 'Field_details': 'Field number for get and set indicating the\n month. This is a calendar-specific value. The first month of\n the year in the Gregorian and Julian calendars is\n JANUARY which is 0; the last depends on the number\n of months in a year.'}, {'Field_name': 'WEEK_OF_YEAR', 'Field_details': 'Field number for get and set indicating the\n week number within the current year.  The first week of the year, as\n defined by getFirstDayOfWeek() and\n getMinimalDaysInFirstWeek(), has value 1.  Subclasses define\n the value of WEEK_OF_YEAR for days before the first week of\n the year.'}, {'Field_name': 'WEEK_OF_MONTH', 'Field_details': 'Field number for get and set indicating the\n week number within the current month.  The first week of the month, as\n defined by getFirstDayOfWeek() and\n getMinimalDaysInFirstWeek(), has value 1.  Subclasses define\n the value of WEEK_OF_MONTH for days before the first week of\n the month.'}, {'Field_name': 'DATE', 'Field_details': 'Field number for get and set indicating the\n day of the month. This is a synonym for DAY_OF_MONTH.\n The first day of the month has value 1.'}, {'Field_name': 'DAY_OF_MONTH', 'Field_details': 'Field number for get and set indicating the\n day of the month. This is a synonym for DATE.\n The first day of the month has value 1.'}, {'Field_name': 'DAY_OF_YEAR', 'Field_details': 'Field number for get and set indicating the day\n number within the current year.  The first day of the year has value 1.'}, {'Field_name': 'DAY_OF_WEEK', 'Field_details': 'Field number for get and set indicating the day\n of the week.  This field takes values SUNDAY,\n MONDAY, TUESDAY, WEDNESDAY,\n THURSDAY, FRIDAY, and SATURDAY.'}, {'Field_name': 'DAY_OF_WEEK_IN_MONTH', 'Field_details': ""Field number for get and set indicating the\n ordinal number of the day of the week within the current month. Together\n with the DAY_OF_WEEK field, this uniquely specifies a day\n within a month.  Unlike WEEK_OF_MONTH and\n WEEK_OF_YEAR, this field's value does not depend on\n getFirstDayOfWeek() or\n getMinimalDaysInFirstWeek().  DAY_OF_MONTH 1\n through 7 always correspond to DAY_OF_WEEK_IN_MONTH\n 1; 8 through 14 correspond to\n DAY_OF_WEEK_IN_MONTH 2, and so on.\n DAY_OF_WEEK_IN_MONTH 0 indicates the week before\n DAY_OF_WEEK_IN_MONTH 1.  Negative values count back from the\n end of the month, so the last Sunday of a month is specified as\n DAY_OF_WEEK = SUNDAY, DAY_OF_WEEK_IN_MONTH = -1.  Because\n negative values count backward they will usually be aligned differently\n within the month than positive values.  For example, if a month has 31\n days, DAY_OF_WEEK_IN_MONTH -1 will overlap\n DAY_OF_WEEK_IN_MONTH 5 and the end of 4.""}, {'Field_name': 'AM_PM', 'Field_details': 'Field number for get and set indicating\n whether the HOUR is before or after noon.\n E.g., at 10:04:15.250 PM the AM_PM is PM.'}, {'Field_name': 'HOUR', 'Field_details': 'Field number for get and set indicating the\n hour of the morning or afternoon. HOUR is used for the\n 12-hour clock (0 - 11). Noon and midnight are represented by 0, not by 12.\n E.g., at 10:04:15.250 PM the HOUR is 10.'}, {'Field_name': 'HOUR_OF_DAY', 'Field_details': 'Field number for get and set indicating the\n hour of the day. HOUR_OF_DAY is used for the 24-hour clock.\n E.g., at 10:04:15.250 PM the HOUR_OF_DAY is 22.'}, {'Field_name': 'MINUTE', 'Field_details': 'Field number for get and set indicating the\n minute within the hour.\n E.g., at 10:04:15.250 PM the MINUTE is 4.'}, {'Field_name': 'SECOND', 'Field_details': 'Field number for get and set indicating the\n second within the minute.\n E.g., at 10:04:15.250 PM the SECOND is 15.'}, {'Field_name': 'MILLISECOND', 'Field_details': 'Field number for get and set indicating the\n millisecond within the second.\n E.g., at 10:04:15.250 PM the MILLISECOND is 250.'}, {'Field_name': 'ZONE_OFFSET', 'Field_details': 'Field number for get and set\n indicating the raw offset from GMT in milliseconds.\n \n This field reflects the correct GMT offset value of the time\n zone of this Calendar if the\n TimeZone implementation subclass supports\n historical GMT offset changes.'}, {'Field_name': 'DST_OFFSET', 'Field_details': 'Field number for get and set indicating the\n daylight saving offset in milliseconds.\n \n This field reflects the correct daylight saving offset value of\n the time zone of this Calendar if the\n TimeZone implementation subclass supports\n historical Daylight Saving Time schedule changes.'}, {'Field_name': 'FIELD_COUNT', 'Field_details': 'The number of distinct fields recognized by get and set.\n Field numbers range from 0..FIELD_COUNT-1.'}, {'Field_name': 'SUNDAY', 'Field_details': 'Value of the DAY_OF_WEEK field indicating\n Sunday.'}, {'Field_name': 'MONDAY', 'Field_details': 'Value of the DAY_OF_WEEK field indicating\n Monday.'}, {'Field_name': 'TUESDAY', 'Field_details': 'Value of the DAY_OF_WEEK field indicating\n Tuesday.'}, {'Field_name': 'WEDNESDAY', 'Field_details': 'Value of the DAY_OF_WEEK field indicating\n Wednesday.'}, {'Field_name': 'THURSDAY', 'Field_details': 'Value of the DAY_OF_WEEK field indicating\n Thursday.'}, {'Field_name': 'FRIDAY', 'Field_details': 'Value of the DAY_OF_WEEK field indicating\n Friday.'}, {'Field_name': 'SATURDAY', 'Field_details': 'Value of the DAY_OF_WEEK field indicating\n Saturday.'}, {'Field_name': 'JANUARY', 'Field_details': 'Value of the MONTH field indicating the\n first month of the year in the Gregorian and Julian calendars.'}, {'Field_name': 'FEBRUARY', 'Field_details': 'Value of the MONTH field indicating the\n second month of the year in the Gregorian and Julian calendars.'}, {'Field_name': 'MARCH', 'Field_details': 'Value of the MONTH field indicating the\n third month of the year in the Gregorian and Julian calendars.'}, {'Field_name': 'APRIL', 'Field_details': 'Value of the MONTH field indicating the\n fourth month of the year in the Gregorian and Julian calendars.'}, {'Field_name': 'MAY', 'Field_details': 'Value of the MONTH field indicating the\n fifth month of the year in the Gregorian and Julian calendars.'}, {'Field_name': 'JUNE', 'Field_details': 'Value of the MONTH field indicating the\n sixth month of the year in the Gregorian and Julian calendars.'}, {'Field_name': 'JULY', 'Field_details': 'Value of the MONTH field indicating the\n seventh month of the year in the Gregorian and Julian calendars.'}, {'Field_name': 'AUGUST', 'Field_details': 'Value of the MONTH field indicating the\n eighth month of the year in the Gregorian and Julian calendars.'}, {'Field_name': 'SEPTEMBER', 'Field_details': 'Value of the MONTH field indicating the\n ninth month of the year in the Gregorian and Julian calendars.'}, {'Field_name': 'OCTOBER', 'Field_details': 'Value of the MONTH field indicating the\n tenth month of the year in the Gregorian and Julian calendars.'}, {'Field_name': 'NOVEMBER', 'Field_details': 'Value of the MONTH field indicating the\n eleventh month of the year in the Gregorian and Julian calendars.'}, {'Field_name': 'DECEMBER', 'Field_details': 'Value of the MONTH field indicating the\n twelfth month of the year in the Gregorian and Julian calendars.'}, {'Field_name': 'UNDECIMBER', 'Field_details': 'Value of the MONTH field indicating the\n thirteenth month of the year. Although GregorianCalendar\n does not use this value, lunar calendars do.'}, {'Field_name': 'AM', 'Field_details': 'Value of the AM_PM field indicating the\n period of the day from midnight to just before noon.'}, {'Field_name': 'PM', 'Field_details': 'Value of the AM_PM field indicating the\n period of the day from noon to just before midnight.'}, {'Field_name': 'ALL_STYLES', 'Field_details': 'A style specifier for getDisplayNames indicating names in all styles, such as\n ""January"" and ""Jan"".'}, {'Field_name': 'SHORT', 'Field_details': 'A style specifier for getDisplayName and getDisplayNames equivalent to SHORT_FORMAT.'}, {'Field_name': 'LONG', 'Field_details': 'A style specifier for getDisplayName and getDisplayNames equivalent to LONG_FORMAT.'}, {'Field_name': 'NARROW_FORMAT', 'Field_details': 'A style specifier for getDisplayName and getDisplayNames indicating a narrow name used for format. Narrow names\n are typically single character strings, such as ""M"" for Monday.'}, {'Field_name': 'NARROW_STANDALONE', 'Field_details': 'A style specifier for getDisplayName and getDisplayNames indicating a narrow name independently. Narrow names\n are typically single character strings, such as ""M"" for Monday.'}, {'Field_name': 'SHORT_FORMAT', 'Field_details': 'A style specifier for getDisplayName and getDisplayNames indicating a short name used for format.'}, {'Field_name': 'LONG_FORMAT', 'Field_details': 'A style specifier for getDisplayName and getDisplayNames indicating a long name used for format.'}, {'Field_name': 'SHORT_STANDALONE', 'Field_details': 'A style specifier for getDisplayName and getDisplayNames indicating a short name used independently,\n such as a month abbreviation as calendar headers.'}, {'Field_name': 'LONG_STANDALONE', 'Field_details': 'A style specifier for getDisplayName and getDisplayNames indicating a long name used independently,\n such as a month name as calendar headers.'}, {'Field_name': 'fields', 'Field_details': 'The calendar field values for the currently set time for this calendar.\n This is an array of FIELD_COUNT integers, with index values\n ERA through DST_OFFSET.'}, {'Field_name': 'isSet', 'Field_details': 'The flags which tell if a specified calendar field for the calendar is set.\n A new object has no fields set.  After the first call to a method\n which generates the fields, they all remain set after that.\n This is an array of FIELD_COUNT booleans, with index values\n ERA through DST_OFFSET.'}, {'Field_name': 'time', 'Field_details': 'The currently set time for this calendar, expressed in milliseconds after\n January 1, 1970, 0:00:00 GMT.'}, {'Field_name': 'isTimeSet', 'Field_details': 'True if then the value of time is valid.\n The time is made invalid by a change to an item of field[].'}, {'Field_name': 'areFieldsSet', 'Field_details': 'True if fields[] are in sync with the currently set time.\n If false, then the next attempt to get the value of a field will\n force a recomputation of all fields from the current value of\n time.'}]"
